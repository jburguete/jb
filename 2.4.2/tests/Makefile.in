.PHONY: strip clean

# Variables
CC = @CC@ @ARCH@ @LTO@ @STD@
CFLAGS = @CFLAGS@ @GLIB_CFLAGS@ @GTOP_CFLAGS@ -DJBW=1 @PRECISION@ \
	`pkg-config --cflags gsl` -O3 -pedantic -Wall -Wextra
LDFLAGS = @LDFLAGS@ @GLIB_LIBS@ @GTOP_LIBS@ `pkg-config --libs gsl` @LIBS@
src = ../jb_config.h ../jb_def.h ../jb_def.c ../jb_math.h ../jb_math.c
obj = ../jb_def.o ../jb_math.o
exe = index_sort check_sort

indexdep = index_sort.c $(obj)
checkdep = check_sort.c $(obj)
PGO = @PGO@
ifeq ($(PGO), 1)
	PGOGENERATE = -fprofile-generate
	PGOUSE = -fprofile-use -fprofile-correction
	pgoobj = ../jb_def.pgo ../jb_math.pgo
	INDEXDEP = index_sortpgo index_sort.gcda
	CHECKDEP = check_sortpgo check_sort.gcda
else
	INDEXDEP = $(indexdep)
	CHECKDEP = $(checkdep)
endif

# Default building
all: $(exe)

# PGO tests
index_sortpgo: $(indexdep)
	$(CC) $(CFLAGS) $(PGOGENERATE) index_sort.c $(pgoobj) -o index_sortpgo \
		$(LDFLAGS)
	./index_sortpgo 10000 1000 0 1
	./index_sortpgo 10000 1000 0 2
	./index_sortpgo 10000 1000 0 3
	./index_sortpgo 10000 1000 0 4
check_sortpgo: $(checkdep)
	$(CC) $(CFLAGS) $(PGOGENERATE) check_sort.c $(pgoobj) -o check_sortpgo \
		$(LDFLAGS)
	./check_sortpgo 1000 1
	./check_sortpgo 1000 2
	./check_sortpgo 1000 3
	./check_sortpgo 1000 4

# Tests
index_sort: $(INDEXDEP)
	$(CC) $(CFLAGS) $(PGOUSE) index_sort.c $(obj) -o index_sort $(LDFLAGS)
check_sort: $(CHECKDEP)
	$(CC) $(CFLAGS) $(PGOUSE) check_sort.c $(obj) -o check_sort $(LDFLAGS)

# Final version
strip:
	make
	strip $(exe)

# Clean
clean:
	rm -rf doc $(exe) *.o 
