.PHONY: strip clean

# Directories
SRC = src/
TESTS = tests/
BINPGO = binpgo/
BIN = bin/
OBJ = obj/

# Variables
CC = @CC@ @ARCH@ @LTO@
CFLAGS = @CFLAGS@ @XML_CFLAGS@ @GTHREAD_CFLAGS@ @GLIB_CFLAGS@ @GTOP_CFLAGS@ \
	@PNG_CFLAGS@ @FREETYPE_CFLAGS@ @GTK_CFLAGS@ @GLEW_CFLAGS@ \
	@VULKAN_CFLAGS@ @GLUT_CFLAGS@ @SDL_CFLAGS@ @GLFW_CFLAGS@ @FONT@ \
	@PRECISION@ @GRAPHIC@ -O3 -pedantic -Wall -Wextra
LDFLAGS = @LDFLAGS@ @LIBS@ @SDL_LIBS@ @GLFW_LIBS@ @GLUT_LIBS@ @VULKAN_LIBS@ \
	@GLEW_LIBS@ @GTK_LIBS@ @FREETYPE_LIBS@ @PNG_LIBS@ @GTOP_LIBS@ \
	@GLIB_LIBS@ @GTHREAD_LIBS@ @XML_LIBS@
TESTS_CFLAGS = @GSL_CFLAGS@ $(CFLAGS) -I$(SRC) -DJBW=1
TESTS_LDFLAGS = $(LDFLAGS) @GSL_LIBS@
EXEFLAGSPGO = $(LDFLAGS) -L$(BINPGO) -Wl,@RPATH@.
EXEFLAGS = $(LDFLAGS) -L$(BIN) -Wl,@RPATH@.

config_h = $(SRC)config.h
jb_config_h = $(SRC)jb_config.h
jb_def_h = $(SRC)jb_def.h
jb_math_h = $(SRC)jb_math.h
jb_xml_h = $(SRC)jb_xml.h
jb_win_h = $(SRC)jb_win.h

jb_def_c = $(SRC)jb_def.c
jb_math_c = $(SRC)jb_math.c
jb_xml_c = $(SRC)jb_xml.c
jb_win_c = $(SRC)jb_win.c

jb_config_pgo = $(OBJ)jb_config.pgo
jb_def_pgo = $(OBJ)jb_def.pgo
jb_math_pgo = $(OBJ)jb_math.pgo
jb_xml_pgo = $(OBJ)jb_xml.pgo
jb_win_bin_pgo = $(OBJ)jb_win_bin.pgo
jb_win_pgo = $(OBJ)jb_win.pgo

test_math_c = $(SRC)test_math.c
test_xml_c = $(SRC)test_xml.c
test_win_c = $(SRC)test_win.c
index_sort_c = $(TESTS)index_sort.c
check_sort_c = $(TESTS)check_sort.c

jb_config_o = $(OBJ)jb_config.o
jb_def_o = $(OBJ)jb_def.o
jb_math_o = $(OBJ)jb_math.o
jb_xml_o = $(OBJ)jb_xml.o
jb_win_bin_o = $(OBJ)jb_win_bin.o
jb_win_o = $(OBJ)jb_win.o

test_math_pgo = $(BINPGO)test_math@EXE@
test_xml_pgo = $(BINPGO)test_xml@EXE@
test_win_pgo = $(BINPGO)test_win@EXE@
index_sort_pgo = $(BINPGO)index_sort@EXE@
check_sort_pgo = $(BINPGO)check_sort@EXE@

test_math = $(BIN)test_math@EXE@
test_xml = $(BIN)test_xml@EXE@
test_win = $(BIN)test_win@EXE@
index_sort = $(BIN)index_sort@EXE@
check_sort = $(BIN)check_sort@EXE@

libjbpgo = $(BINPGO)libjb@SO@
libjbmpgo = $(BINPGO)libjbm@SO@
libjbxmlpgo = $(BINPGO)libjbxml@SO@
libjbbinpgo = $(BINPGO)libjbbin@SO@
libjbwpgo = $(BINPGO)libjbw@SO@

libjb = $(BIN)libjb@SO@
libjbm = $(BIN)libjbm@SO@
libjbxml = $(BIN)libjbxml@SO@
libjbbin = $(BIN)libjbbin@SO@
libjbw = $(BIN)libjbw@SO@

src = $(config_h) $(jb_config_h) $(jb_def_h) $(jb_math_h) $(jb_xml_h) \
	$(jb_win_h) $(jb_def_c) $(jb_math_c) $(jb_xml_c) $(jb_win_c)
objpgo = $(jb_config_pgo) $(jb_def_pgo) $(jb_math_pgo) $(jb_xml_pgo) \
	$(jb_win_bin_pgo) $(jb_win_pgo)
obj = $(jb_config_o) $(jb_def_o) $(jb_math_o) $(jb_xml_o) $(jb_win_bin_o) \
	$(jb_win_o)
tests = $(test_math) $(test_xml) $(test_win) $(index_sort) $(check_sort)
exe = $(libjb) $(libjbm) $(libjbxml) $(libjbbin) $(libjbw) $(tests)
dep = $(jb_def_h) $(jb_config_h) $(config_h) Makefile
defdep = $(jb_def_c) $(dep)
mathdep = $(jb_math_c) $(jb_math_h) $(dep)
xmldep = $(jb_xml_c) $(jb_xml_h) $(jb_math_h) $(dep)
windep = $(jb_win_c) $(jb_win_h) $(jb_math_h) $(dep)
index_sort_dep = $(index_sort_c) $(jb_math_h) $(dep)
check_sort_dep = $(check_sort_c) $(jb_math_h) $(dep)

ifeq (@PGO@, 1)
ifeq (@CC@, clang)
	PGOGENERATE = -fprofile-instr-generate
	PGOUSE = -fprofile-instr-use=$(BINPGO)jb.profraw
	mathprefix = LLVM_PROFILE_FILE="math.profdata"
	xmlprefix = LLVM_PROFILE_FILE="xml.profdata"
	winprefix = LLVM_PROFILE_FILE="win.profdata"
	index_sortprefix = LLVM_PROFILE_FILE="index_sort.profdata"
	check_sortprefix = LLVM_PROFILE_FILE="check_sort.profdata"
	llvm_merge = @LLVM_PROFDATA@ merge *.profdata -output jb.profraw
else
	PGOGENERATE = -fprofile-generate
	PGOUSE = -fprofile-use -fprofile-correction
endif
	pgoobj = $(jb_def_pgo) $(jb_math_pgo) $(jb_xml_pgo) $(jb_win_bin_pgo) \
		$(jb_win_pgo)
	testspgo = $(test_math_pgo) $(test_xml_pgo) $(test_win_pgo) \
		$(index_sort_pgo) $(check_sort_pgo)
	DEFDEP = $(testspgo)
	MATHDEP = $(testspgo)
	XMLDEP = $(testspgo)
	WINDEP = $(testspgo)
	INDEX_SORTDEP = $(testspgo)
	CHECK_SORTDEP = $(testspgo)
else
	DEFDEP = $(defdep)
	MATHDEP = $(mathdep)
	XMLDEP = $(xmldep)
	WINDEP = $(windep)
	INDEX_SORTDEP = $(index_sort_dep)
	CHECK_SORTDEP = $(check_sort_dep)
endif
VULKAN = @VULKAN@
ifeq ($(VULKAN), 1)
	shaders = shaders/2D.spv shaders/2Dc.spv shaders/3D.spv \
		shaders/3Dc.spv shaders/color.spv shaders/text-vert.spv \
		shaders/text-frag.spv shaders/image-vert.spv \
		shaders/image-frag.spv
endif
locale = locale/
es = $(locale)es/LC_MESSAGES/
fr = $(locale)fr/LC_MESSAGES/
it = $(locale)it/LC_MESSAGES/
pot = $(locale)jb.pot
locales = $(es)jb.mo $(fr)jb.mo $(it)jb.mo

# Default building
all: $(OBJ) $(BIN) $(BINPGO) $(exe) $(shaders) $(locales) doc/latex/refman.pdf

# Directories
$(OBJ):
	test -d $(OBJ) || mkdir -p $(OBJ)
$(BIN):
	test -d $(BIN) || mkdir -p $(BIN)
$(BINPGO):
	test -d $(BINPGO) || mkdir -p $(BINPGO)

# PGO objects
$(jb_def_pgo): $(defdep)
	$(CC) $(CFLAGS) $(PGOGENERATE) -c -fPIC @JBW@ $(jb_def_c) -o $(jb_def_pgo)
$(jb_math_pgo): $(mathdep)
	$(CC) $(CFLAGS) $(PGOGENERATE) -c -fPIC @JBW@ $(jb_math_c) -o $(jb_math_pgo)
$(jb_xml_pgo): $(xmldep)
	$(CC) $(CFLAGS) $(PGOGENERATE) -c -fPIC @JBW@ $(jb_xml_c) -o $(jb_xml_pgo)
$(jb_win_bin_pgo): $(windep)
	$(CC) $(CFLAGS) $(PGOGENERATE) -c -fPIC -DJBW=1 $(jb_win_c) \
		-o $(jb_win_bin_pgo)
$(jb_win_pgo): $(windep)
	$(CC) $(CFLAGS) $(PGOGENERATE) -c -fPIC @JBW@ $(jb_win_c) \
		-o $(jb_win_pgo)

# PGO dynamic libraries
$(libjbpgo): $(jb_def_pgo)
	$(CC) $(PGOGENERATE) -shared $(jb_def_pgo) $(LDFLAGS) -o $(libjbpgo)
$(libjbmpgo): $(jb_math_pgo) $(libjbpgo)
	$(CC) $(PGOGENERATE) -shared $(jb_math_pgo) $(EXEFLAGSPGO) -o $(libjbmpgo) \
		-ljb
$(libjbxmlpgo): $(jb_xml_pgo) $(libjbpgo) $(libjbmpgo)
	$(CC) $(PGOGENERATE) -shared $(jb_xml_pgo) $(EXEFLAGSPGO) -o $(libjbxmlpgo) \
		-ljb -ljbm
$(libjbbinpgo): $(jb_win_bin_pgo) $(libjbpgo) $(libjbmpgo)
	$(CC) $(PGOGENERATE) -shared $(jb_win_bin_pgo) $(EXEFLAGSPGO) \
		-o $(libjbbinpgo) -ljb -ljbm
$(libjbwpgo): $(jb_win_pgo) $(libjbpgo) $(libjbmpgo)
	$(CC) $(PGOGENERATE) -shared $(jb_win_pgo) $(EXEFLAGSPGO) -o $(libjbwpgo) \
		-ljb -ljbm

# PGO tests
$(test_math_pgo): $(test_math_c) $(libjbpgo) $(libjbmpgo)
	$(CC) $(CFLAGS) $(PGOGENERATE) -DJBW=1 $(test_math_c) -o $(test_math_pgo) \
		$(EXEFLAGSPGO) -ljb -ljbm
	cd $(BINPGO); $(mathprefix) ./test_math
$(test_xml_pgo): $(test_xml_c) $(libjbpgo) $(libjbmpgo) $(libjbxmlpgo)
	$(CC) $(CFLAGS) $(PGOGENERATE) -DJBW=1 $(test_xml_c) -o $(test_xml_pgo) \
		$(EXEFLAGSPGO) -ljb -ljbm -ljbxml
	cd $(BINPGO); $(xmlprefix) ./test_xml
$(test_win_pgo): $(test_win_c) $(libjbpgo) $(libjbmpgo) $(libjbwpgo)
	$(CC) $(CFLAGS) $(PGOGENERATE) @JBW@ $(test_win_c) -o $(test_win_pgo) \
		$(EXEFLAGSPGO) -ljb -ljbm -ljbw
	cd $(BINPGO); $(winprefix) ./test_win; $(llvm_merge)
$(index_sort_pgo): $(index_sortdep)
	$(CC) $(TESTS_CFLAGS) $(PGOGENERATE) $(index_sort_c) \
		-o $(index_sort_pgo) $(TESTS_LDFLAGS) $(EXEFLAGSPGO) -ljbm -ljb
	cd $(BINPGO); ./index_sort 10000 1000 0 1
	cd $(BINPGO); ./index_sort 10000 1000 0 2
	cd $(BINPGO); ./index_sort 10000 1000 0 3
	cd $(BINPGO); ./index_sort 10000 1000 0 4
$(check_sort_pgo): $(check_sortdep)
	$(CC) $(TESTS_CFLAGS) $(PGOGENERATE) $(check_sort_c) \
		-o $(check_sort_pgo) $(TESTS_LDFLAGS) $(EXEFLAGSPGO) -ljbm -ljb
	cd $(BINPGO); ./check_sort 1000 1
	cd $(BINPGO); ./check_sort 1000 2
	cd $(BINPGO); ./check_sort 1000 3
	cd $(BINPGO); ./check_sort 1000 4

# Objects
$(jb_def_o): $(DEFDEP)
	$(CC) $(CFLAGS) $(PGOUSE) -c -fPIC @JBW@ $(jb_def_c) -o $(jb_def_o)
$(jb_math_o): $(MATHDEP)
	$(CC) $(CFLAGS) $(PGOUSE) -c -fPIC @JBW@ $(jb_math_c) -o $(jb_math_o)
$(jb_xml_o): $(XMLDEP)
	$(CC) $(CFLAGS) $(PGOUSE) -c -fPIC @JBW@ $(jb_xml_c) -o $(jb_xml_o)
$(jb_win_bin_o): $(WINDEP)
	$(CC) $(CFLAGS) $(PGOUSE) -c -fPIC -DJBW=1 $(jb_win_c) -o $(jb_win_bin_o)
$(jb_win_o): $(WINDEP)
	$(CC) $(CFLAGS) $(PGOUSE) -c -fPIC @JBW@ $(jb_win_c) -o $(jb_win_o)

# Dynamic libraries
$(libjb): $(jb_def_o)
	$(CC) $(PGOUSE) -shared $(jb_def_o) $(LDFLAGS) -o $(libjb)
$(libjbm): $(jb_math_o) $(libjb)
	$(CC) $(PGOUSE) -shared $(jb_math_o) $(EXEFLAGS) -o $(libjbm) -ljb
$(libjbxml): $(jb_xml_o) $(libjb) $(libjbm)
	$(CC) $(PGOUSE) -shared $(jb_xml_o) $(EXEFLAGS) -o $(libjbxml) -ljb -ljbm
$(libjbbin): $(jb_win_bin_o) $(libjb) $(libjbm)
	$(CC) $(PGOUSE) -shared $(jb_win_bin_o) $(EXEFLAGS) -o $(libjbbin) -ljb -ljbm
$(libjbw): $(jb_win_o) $(libjb) $(libjbm)
	$(CC) $(PGOUSE) -shared $(jb_win_o) $(EXEFLAGS) -o $(libjbw) -ljb -ljbm

# Tests
$(test_math): $(test_math_c) $(libjb) $(libjbm)
	$(CC) $(CFLAGS) $(PGOUSE) -DJBW=1 $(test_math_c) -o $(test_math) $(EXEFLAGS) \
		-ljb -ljbm
$(test_xml): $(test_xml_c) $(libjb) $(libjbm) $(libjbbin)
	$(CC) $(CFLAGS) $(PGOUSE) -DJBW=1 $(test_xml_c) -o $(test_xml) $(EXEFLAGS) \
		-ljb -ljbm -ljbxml
$(test_win): $(test_win_c) $(libjb) $(libjbm) $(libjbw)
	$(CC) $(CFLAGS) $(PGOUSE) @JBW@ $(test_win_c) -o $(test_win) $(EXEFLAGS) \
		-ljb -ljbm -ljbw
$(index_sort): $(INDEX_SORTDEP)
	$(CC) $(TESTS_CFLAGS) $(PGOUSE) $(index_sort_c) -o $(index_sort) \
		$(TESTS_LDFLAGS) $(EXEFLAGS) -ljbm -ljb
$(check_sort): $(CHECK_SORTDEP)
	$(CC) $(TESTS_CFLAGS) $(PGOUSE) $(check_sort_c) -o $(check_sort) \
		$(TESTS_LDFLAGS) $(EXEFLAGS) -ljbm -ljb

# Shaders
shaders/2D.spv: shaders/2D.vert Makefile
	glslangValidator -V shaders/2D.vert -o shaders/2D.spv
shaders/2Dc.spv: shaders/2Dc.vert Makefile
	glslangValidator -V shaders/2Dc.vert -o shaders/2Dc.spv
shaders/3D.spv: shaders/3D.vert Makefile
	glslangValidator -V shaders/3D.vert -o shaders/3D.spv
shaders/3Dc.spv: shaders/3Dc.vert Makefile
	glslangValidator -V shaders/3Dc.vert -o shaders/3Dc.spv
shaders/color.spv: shaders/color.frag Makefile
	glslangValidator -V shaders/color.frag -o shaders/color.spv
shaders/text-vert.spv: shaders/text.vert Makefile
	glslangValidator -V shaders/text.vert -o shaders/text-vert.spv
shaders/text-frag.spv: shaders/text.frag Makefile
	glslangValidator -V shaders/text.frag -o shaders/text-frag.spv
shaders/image-vert.spv: shaders/image.vert Makefile
	glslangValidator -V shaders/image.vert -o shaders/image-vert.spv
shaders/image-frag.spv: shaders/image.frag Makefile
	glslangValidator -V shaders/image.frag -o shaders/image-frag.spv

# Locales
locales = es fr it
$(pot): $(src) Makefile
	if ! test -d $(locale); then mkdir -p $(locale); fi
	@gnu@xgettext -k_ -d jb -o $(pot) --from-code=UTF-8 $(src)
	$(foreach i,$(locales), \
		if ! test -d $($i); then mkdir -p $($i); fi; \
	  if ! test -f $($i)jb.po; then \
			msginit -l $i -i $(pot) -o $($i)jb.po --no-translator; \
		else \
			msgmerge -U $($i)jb.po $(pot); \
		fi; \
		vim $($i)jb.po;)
$(es)jb.mo: $(pot) $(es)jb.po
	@gnu@msgfmt -c -v $(es)jb.po -o $(es)jb.mo
$(fr)jb.mo: $(pot) $(fr)jb.po
	@gnu@msgfmt -c -v $(fr)jb.po -o $(fr)jb.mo
$(it)jb.mo: $(pot) $(it)jb.po
	@gnu@msgfmt -c -v $(it)jb.po -o $(it)jb.mo

# Documentation
doc/latex/refman.pdf: $(src) Doxyfile Makefile
	doxygen
	cd doc/latex; pdflatex refman; pdflatex refman;

# Final version
strip:
	@MAKE@
	strip $(exe) $(tests)

# Clean
clean:
	rm -rf doc $(OBJ) $(BIN) $(BINPGO)
